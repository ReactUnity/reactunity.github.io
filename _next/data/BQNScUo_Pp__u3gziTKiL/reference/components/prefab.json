{"pageProps":{"content":"[[\"$r\",\"MaxWidth\",\"2\",{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"<prefab>\"}],\" allows to instantiate a custom prefab as a React Component.\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function App() {\\n  // Load the prefab using globals\\n  const { prefab } = useGlobals();\\n  // or alternatively you can load the prefab from resources\\n  // const prefab = useMemo(() => Interop.UnityEngine.Resources.Load('MyPrefab') as UnityEngine.GameObject, []);\\n\\n  return <prefab target={prefab} />;\\n};\\n\"}]}]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"lifecycle-events-and-properties\",\"children\":\"Lifecycle events and properties\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"<prefab>\"}],\" component instantiates the prefab, then searches for a component implementing the \",[\"$r\",\"code\",null,{\"children\":\"IPrefabTarget\"}],\" interface and calls the \",[\"$r\",\"code\",null,{\"children\":\"Mount\"}],\", \",[\"$r\",\"code\",null,{\"children\":\"UnMount\"}],\" lifecycle hooks with the prefab instance.\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"You can use them to handle custom logic, events, and properties passed to the prefab.\"}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"example-of-a-custom-prefab-target-component\",\"children\":\"Example of a custom prefab target component:\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-csharp\",\"children\":\"public class MyComponentPrefabTarget : MonoBehaviour, IPrefabTarget\\n{\\n    PrefabComponent Component { get; set; }\\n\\n    public Action AddEventListener(string eventName, Callback callback)\\n    {\\n        // Here you can handle custom events passed to the prefab.\\n        return null;\\n    }\\n\\n    public void Mount(PrefabComponent cmp)\\n    {\\n        Debug.Log(\\\"Mounting MyComponentPrefabTarget\\\");\\n        // Saving the reference of cmp to use it later\\n        // For instance you can use it to emit custom events to React `Component.FireEvent(\\\"onSomething\\\", value)`\\n        Component = cmp;\\n    }\\n\\n    public bool SetProperty(string propertyName, object value)\\n    {\\n        // Here you can handle custom properties passed to the prefab\\n        switch (propertyName)\\n        {\\n            case \\\"myprop\\\":\\n                Debug.Log(\\\"Doing something with myprop\\\");\\n                return true;\\n        }\\n        return false;\\n    }\\n\\n    public void Unmount(PrefabComponent cmp)\\n    {\\n        Debug.Log(\\\"Unmounting MyComponentPrefabTarget\\\");\\n        Component = null;\\n    }\\n}\\n\"}]}],\"\\n\",[\"$r\",\"h5\",null,{\"id\":\"example-of-a-prefab-with-a-custom-target-component\",\"children\":\"Example of a prefab with a custom target component:\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"\\nexport default function App() {\\n  const prefab = useMemo(() => Interop.UnityEngine.Resources.Load('MyPrefab') as UnityEngine.GameObject, []);\\n\\n  return (\\n    <prefab\\n      target={prefab}\\n      custom={{\\n        // This will be passed to the prefab target component\\n        myprop: 'something'\\n      }}\\n      // This will be invoked when `FireEvent` is called from the prefab target component\\n      onSomething={val => console.log('Something happened', val)}\\n    />\\n  );\\n};\\n\"}]}]]}]]","toc":"[{\"url\":\"#\",\"text\":\"Overview\",\"depth\":2},{\"url\":\"#lifecycle-events-and-properties\",\"depth\":3,\"text\":\"Lifecycle events and properties\"}]","meta":{"title":"<prefab>","layout":"API"}},"__N_SSG":true}