{"pageProps":{"content":"[[\"$r\",\"MaxWidth\",\"6\",{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useGlobals\"}],\" is a hook that returns the \",[\"$r\",\"code\",null,{\"children\":\"Globals\"}],\" object, which is the shared object dictionary between React and C# sides.\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const globals = useGlobals();\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"The hook will rerender the component it is used in when the \",[\"$r\",\"code\",null,{\"children\":\"Globals\"}],\" object changes in either side. Although the \",[\"$r\",\"code\",null,{\"children\":\"Globals\"}],\" object can be accessed directly, this hook is the recommended way to access it on React components.\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useGlobals } from '@reactunity/renderer';\\n\\nGlobals.testCount = 0;\\n\\nfunction ForeignComponent() {\\n  return <button onClick={() => Globals.testCount++}>\\n    Increase count\\n  </button>;\\n}\\n\\nfunction HookGlobalsUser() {\\n  const globals = useGlobals();\\n\\n  return <text>\\n    Count with hook is: {globals.testCount}\\n  </text>;\\n}\\n\\nfunction StaticGlobalsUser() {\\n  return <text>\\n    Count without hook is: {Globals.testCount}\\n  </text>;\\n}\\n\\nexport default function App() {\\n  return <>\\n    <ForeignComponent />\\n    <HookGlobalsUser />\\n    <StaticGlobalsUser />\\n  </>;\\n}\\n\"}]}]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"In the example, it can be seen that when \",[\"$r\",\"code\",null,{\"children\":\"Globals\"}],\" is used without hook, changes to it will not cause a rerender and UI may be out of sync with its state.\"]}]]}]]","toc":"[]","meta":{"title":"useGlobals()","layout":"API"}},"__N_SSG":true}